html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
# Extract href (link) and title
links <- elements %>% html_attr("href")
titles <- elements %>% html_attr("title")
if (length(links) == 0) {
message("No CRT links found on the page.")
return(NULL)
} else {
# Prepend the base URL to form complete links
base_url <- "https://unfccc.int"
full_links <- sapply(links, function(link) {
if (startsWith(link, "/")) {
paste0(base_url, link)
} else {
link
}
})
# Extract country names (assume the first word(s) before the first period in the title)
country_names <- sapply(titles, function(title) {
strsplit(title, "\\.", fixed = FALSE)[[1]][1]
})
# Combine country names and links into a data frame
result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
return(result)
}
}, error = function(e) {
message("Error during link extraction: ", e$message)
return(NULL)
})
}
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
load("data/data_crt_files.RData")
crt_links <- left_join(crt_links,files_crts %>% select(dir,iso) %>% distinct(),by="iso")
crt_links <- crt_links %>% filter(is.na(dir))
rm(list=ls())
library(rvest)
library(httr)
library(countrycode)
library(tidyverse)
# Function to fetch and parse the webpage
fetch_webpage <- function(url) {
tryCatch({
page <- GET(url)
if (status_code(page) == 200) {
content <- read_html(page)
return(content)
} else {
stop("Failed to fetch the webpage. HTTP status code: ", status_code(page))
}
}, error = function(e) {
message("Error: ", e$message)
return(NULL)
})
}
# Function to extract links with title "CRT"
extract_crt_links <- function(webpage) {
tryCatch({
# Select anchor (<a>) elements where title contains "CRT"
elements <- webpage %>%
html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
# Extract href (link) and title
links <- elements %>% html_attr("href")
titles <- elements %>% html_attr("title")
if (length(links) == 0) {
message("No CRT links found on the page.")
return(NULL)
} else {
# Prepend the base URL to form complete links
base_url <- "https://unfccc.int"
full_links <- sapply(links, function(link) {
if (startsWith(link, "/")) {
paste0(base_url, link)
} else {
link
}
})
# Extract country names (assume the first word(s) before the first period in the title)
country_names <- sapply(titles, function(title) {
strsplit(title, "\\.", fixed = FALSE)[[1]][1]
})
# Combine country names and links into a data frame
result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
return(result)
}
}, error = function(e) {
message("Error during link extraction: ", e$message)
return(NULL)
})
}
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
rm(list=ls())
library(rvest)
library(httr)
library(countrycode)
library(tidyverse)
# Function to fetch and parse the webpage
fetch_webpage <- function(url) {
tryCatch({
page <- GET(url)
if (status_code(page) == 200) {
content <- read_html(page)
return(content)
} else {
stop("Failed to fetch the webpage. HTTP status code: ", status_code(page))
}
}, error = function(e) {
message("Error: ", e$message)
return(NULL)
})
}
# Function to extract links with title "CRT"
extract_crt_links <- function(webpage) {
tryCatch({
# Select anchor (<a>) elements where title contains "CRT"
elements <- webpage %>%
html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
# Extract href (link) and title
links <- elements %>% html_attr("href")
titles <- elements %>% html_attr("title")
if (length(links) == 0) {
message("No CRT links found on the page.")
return(NULL)
} else {
# Prepend the base URL to form complete links
base_url <- "https://unfccc.int"
full_links <- sapply(links, function(link) {
if (startsWith(link, "/")) {
paste0(base_url, link)
} else {
link
}
})
# Extract country names (assume the first word(s) before the first period in the title)
country_names <- sapply(titles, function(title) {
strsplit(title, "\\.", fixed = FALSE)[[1]][1]
})
# Combine country names and links into a data frame
result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
return(result)
}
}, error = function(e) {
message("Error during link extraction: ", e$message)
return(NULL)
})
}
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
load("data/data_crt_files.RData")
crt_links <- left_join(crt_links,files_crts %>% select(dir,iso) %>% distinct(),by="iso")
crt_links <- crt_links %>% filter(is.na(dir))
View(crt_links)
rm(list=ls())
library(rvest)
library(httr)
library(countrycode)
library(tidyverse)
# Function to fetch and parse the webpage
fetch_webpage <- function(url) {
tryCatch({
page <- GET(url)
if (status_code(page) == 200) {
content <- read_html(page)
return(content)
} else {
stop("Failed to fetch the webpage. HTTP status code: ", status_code(page))
}
}, error = function(e) {
message("Error: ", e$message)
return(NULL)
})
}
# Function to extract links with title "CRT"
extract_crt_links <- function(webpage) {
tryCatch({
# Select anchor (<a>) elements where title contains "CRT"
elements <- webpage %>%
html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
# Extract href (link) and title
links <- elements %>% html_attr("href")
titles <- elements %>% html_attr("title")
if (length(links) == 0) {
message("No CRT links found on the page.")
return(NULL)
} else {
# Prepend the base URL to form complete links
base_url <- "https://unfccc.int"
full_links <- sapply(links, function(link) {
if (startsWith(link, "/")) {
paste0(base_url, link)
} else {
link
}
})
# Extract country names (assume the first word(s) before the first period in the title)
country_names <- sapply(titles, function(title) {
strsplit(title, "\\.", fixed = FALSE)[[1]][1]
})
# Combine country names and links into a data frame
result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
return(result)
}
}, error = function(e) {
message("Error during link extraction: ", e$message)
return(NULL)
})
}
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
load("data/data_crt_files.RData")
crt_links <- left_join(crt_links,files_crts %>% select(dir,iso) %>% distinct(),by="iso")
crt_links <- crt_links %>% filter(is.na(dir))
View(crt_links)
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(openxlsx)
library(tidyverse)
library(countrycode)
load("data/data_crts.RData")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/figure_style.R")
#colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl_emissions() +
scale_fill_manual(values=colours_9_sectors) +
scale_x_continuous(limits=c(1989,max(data_plots$year)+1)) +
theme(axis.title = element_blank()) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories ⌂ CC-BY William F. Lamb")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = cairo_pdf, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
#colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl_bar_trend() +
scale_fill_manual(values=colours_9_sectors) +
scale_x_continuous(limits=c(1989,max(data_plots$year)+1)) +
theme(axis.title = element_blank()) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories ⌂ CC-BY William F. Lamb")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = cairo_pdf, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
p
#colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl_bar_trend() +
scale_fill_manual(values=colours_9_sectors) +
scale_x_continuous(limits=c(1989,max(data_plots$year)+1)) +
theme(axis.title = element_blank()) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC  ⌂ Tidy GHG inventories  ⌂ CC-BY William F. Lamb")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = cairo_pdf, width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
#colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl_bar_trend() +
scale_fill_manual(values=colours_9_sectors) +
scale_x_continuous(limits=c(1989,max(data_plots$year)+1)) +
theme(axis.title = element_blank()) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC  ⌂ Tidy GHG inventories  ⌂ CC-BY William F. Lamb")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 4)
ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = cairo_pdf, width = 8, height = 4)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 4)
}
p
knitr::opts_chunk$set(echo = TRUE)
rm(list=ls())
library(openxlsx)
library(tidyverse)
library(countrycode)
load("data/data_crts.RData")
source("https://raw.githubusercontent.com/lambwf/Codebase/main/figure_style.R")
data_plots$sector_tidy <- gsub("Land use change","Land use change (LULUCF)",data_plots$sector_tidy)
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots$sector_tidy <- gsub("Land use change","Land use change (LULUCF)",data_plots$sector_tidy)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
#colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots$sector_tidy <- gsub("Land use change","Land use change (LULUCF)",data_plots$sector_tidy)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy | Power",
"Energy | Industry",
"Energy | Transport",
"Energy | Buildings & other",
"Energy | Fuel production",
"Industrial processes",
"Agriculture",
"Land use change (LULUCF)",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl_bar_trend() +
scale_fill_manual(values=colours_9_sectors) +
scale_x_continuous(limits=c(1989,max(data_plots$year)+1)) +
theme(axis.title = element_blank()) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC  ⌂ Tidy GHG inventories  ⌂ CC-BY William F. Lamb")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 4)
ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = cairo_pdf, width = 8, height = 4)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 4)
}
p
rm(list=ls())
library(rvest)
library(httr)
library(countrycode)
library(tidyverse)
# Function to fetch and parse the webpage
fetch_webpage <- function(url) {
tryCatch({
page <- GET(url)
if (status_code(page) == 200) {
content <- read_html(page)
return(content)
} else {
stop("Failed to fetch the webpage. HTTP status code: ", status_code(page))
}
}, error = function(e) {
message("Error: ", e$message)
return(NULL)
})
}
# Function to extract links with title "CRT"
extract_crt_links <- function(webpage) {
tryCatch({
# Select anchor (<a>) elements where title contains "CRT"
elements <- webpage %>%
html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
# Extract href (link) and title
links <- elements %>% html_attr("href")
titles <- elements %>% html_attr("title")
if (length(links) == 0) {
message("No CRT links found on the page.")
return(NULL)
} else {
# Prepend the base URL to form complete links
base_url <- "https://unfccc.int"
full_links <- sapply(links, function(link) {
if (startsWith(link, "/")) {
paste0(base_url, link)
} else {
link
}
})
# Extract country names (assume the first word(s) before the first period in the title)
country_names <- sapply(titles, function(title) {
strsplit(title, "\\.", fixed = FALSE)[[1]][1]
})
# Combine country names and links into a data frame
result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
return(result)
}
}, error = function(e) {
message("Error during link extraction: ", e$message)
return(NULL)
})
}
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
##
webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")
crt_links <- extract_crt_links(webpage)
crt_links <- crt_links %>%
mutate(iso=countrycode(country,'country.name','iso3c'))
load("data/data_crt_files.RData")
crt_links <- left_join(crt_links,files_crts %>% select(dir,iso) %>% distinct(),by="iso")
crt_links <- crt_links %>% filter(is.na(dir))
View(crt_links)
