panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
p <- data %>%
ggplot(.,aes(x=year,y=value,fill=sector_lv1)) +
geom_col(color='#252525',linewidth=0.25) +
facet_wrap(.~country,ncol=2,scales="free") +
theme_wl() +
scale_fill_manual(values=colors) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.position = c(1, 0), legend.justification = c(1, 0),
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p <- data %>%
ggplot(.,aes(x=year,y=value,fill=sector_lv1)) +
geom_col(color='#252525',linewidth=0.25) +
facet_wrap(.~country,ncol=2,scales="free") +
theme_wl() +
scale_fill_manual(values=colors) +
theme(text = element_text(family = "Liberation Sans"),
#legend.position="right",
legend.position = c(1, 0), legend.justification = c(1, 0),
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
p
ggsave("plots/natural_disturbances.png", plot = p, device = "png", width = 8, height = 6)
p <- data %>%
ggplot(.,aes(x=year,y=value,fill=sector_lv1)) +
geom_col(color='#252525',linewidth=0.25) +
facet_wrap(.~country,ncol=2,scales="free") +
theme_wl() +
scale_fill_manual(values=colors) +
theme(text = element_text(family = "Liberation Sans"),
#legend.position="right",
legend.position = c(0.8, 0), legend.justification = c(1, 0),
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
p <- data %>%
ggplot(.,aes(x=year,y=value,fill=sector_lv1)) +
geom_col(color='#252525',linewidth=0.25) +
facet_wrap(.~country,ncol=2,scales="free") +
theme_wl() +
scale_fill_manual(values=colors) +
theme(text = element_text(family = "Liberation Sans"),
#legend.position="right",
legend.position = c(0.89, 0), legend.justification = c(1, 0),
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
p <- data %>%
ggplot(.,aes(x=year,y=value,fill=sector_lv1)) +
geom_col(color='#252525',linewidth=0.25) +
facet_wrap(.~country,ncol=2,scales="free") +
theme_wl() +
scale_fill_manual(values=colors) +
theme(text = element_text(family = "Liberation Sans"),
#legend.position="right",
legend.position = c(0.9, 0), legend.justification = c(1, 0),
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10))) +
labs(subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
ggsave("plots/natural_disturbances.png", plot = p, device = "png", width = 8, height = 6)
View(data_disturbances)
136666.2/1000
colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy: Power",
"Energy: Industry",
"Energy: Transport",
"Energy: Buildings & other",
"Energy: Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl() +
scale_fill_manual(values=colors) +
scale_x_continuous(limits=c(1990,max(data_plots$year))) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10)),
legend.key.size = unit(0.5, "cm")) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
ggsave(paste0("plots/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl() +
scale_fill_manual(values=colors) +
scale_x_continuous(limits=c(1990,max(data_plots$year))) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10)),
legend.key.size = unit(0.5, "cm")) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
ggsave(paste0("plots/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
??ggsave
#ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
install.packages('svglite')
#ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy: Power",
"Energy: Industry",
"Energy: Transport",
"Energy: Buildings & other",
"Energy: Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl() +
scale_fill_manual(values=colors) +
scale_x_continuous(limits=c(1990,max(data_plots$year))) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10)),
legend.key.size = unit(0.5, "cm")) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
ggsave(paste0("plots/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
#ggsave(paste0("plots/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
ggsave(paste0("plots/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
p
data <- data_crts %>%
filter(value!=0) %>%
group_by(across(-one_of("gas","value"))) %>%
summarise(value=sum(value,na.rm=T))
data <- data %>%
group_by(country,iso,sector_lv1,year) %>%
summarise(value=sum(value)/1e6)
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy: Power",
"Energy: Industry",
"Energy: Transport",
"Energy: Buildings & other",
"Energy: Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
View(data_plots)
max(data_plots$year)
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl() +
scale_fill_manual(values=colors) +
scale_x_continuous(limits=c(1990,max(data_plots$year)+1)) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10)),
legend.key.size = unit(0.5, "cm")) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
p
colors <- c("#365f90ff", "#4672b3ff", "#659cccff", "#a3d3f7ff", "#6ccac8ff", "#e5b82cff", "#4f8455ff", "#6aad75ff", "#818181ff")
data_plots <- data_crts %>%
left_join(.,read.xlsx("data/cc_inventory_sectors.xlsx") %>% select(sector_code,sector_tidy)) %>%
group_by(country,iso,year,sector_tidy) %>%
summarise(value=sum(value,na.rm=T)/1e6)
data_plots <- data_plots %>%
mutate(sector_tidy = as.factor(sector_tidy)) %>%
mutate(sector_tidy = fct_relevel(sector_tidy,
"Energy: Power",
"Energy: Industry",
"Energy: Transport",
"Energy: Buildings & other",
"Energy: Fuel production",
"Industrial processes",
"Agriculture",
"Land use change",
"Waste"))
countries = unique(data_plots$country)
for (i in 1:length(countries)) {
p <- data_plots %>%
filter(country == countries[i]) %>%
ggplot(.,aes(x=year,y=value,fill=sector_tidy)) +
geom_col(color='#252525',linewidth=0.25) +
theme_wl() +
scale_fill_manual(values=colors) +
scale_x_continuous(limits=c(1990,max(data_plots$year)+1)) +
theme(text = element_text(family = "Liberation Sans"),
legend.position="right",
legend.title=element_blank(),
axis.title = element_blank(),
axis.ticks = element_line(color="#636363",size=0.25),
panel.grid.major.x = element_blank(),
strip.background = element_blank(),
strip.text = element_text(size=12,color='#636363',hjust=0,face = "bold"),
panel.border = element_blank(),
axis.line = element_line(color="#636363",size = 0.25),
plot.title = element_text(margin = margin(t = 10)),
legend.key.size = unit(0.5, "cm")) +
labs(title=paste0(countries[i]),
subtitle=expression("Greenhouse gas emissions (MtCO"[2]*"e/yr)"),
caption="⌂ UNFCCC ⌂ Tidy GHG inventories")
ggsave(paste0("plots/countries/",countries[i],".png"), plot = p, device = "png", dpi = 300, width = 8, height = 3.5)
#ggsave(paste0("plots/countries/",countries[i],".pdf"), plot = p, device = "pdf", width = 8, height = 3.5)
ggsave(paste0("plots/countries/",countries[i],".svg"), plot = p, device = "svg", width = 8, height = 3.5)
}
p
# Setup: Load required libraries
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(knitr)
# List all SVG files in the directory
filenames <- list.files("plots/countries/", pattern = "*.svg", full.names = TRUE)
# Extract the country name from the file path
country <- sub(".*/(.*)\\.svg", "\\1", file)
# Loop through files and generate HTML output
for (file in filenames) {
# Extract the country name from the file path
country <- sub(".*/(.*)\\.svg", "\\1", file)
# Define links for data, PNG, and PDF
link_data <- "<a target='_blank' href='https://zenodo.org/records/14637347'>data</a>"
link_png <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".png'>png</a>")
link_pdf <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".pdf'>pdf</a>")
# Generate HTML output for each figure
cat(paste0("
<div class='figure-container'>
<img src='", file, "' alt='", country, "' />
<div class='figure-title'>", country, "</div>
<div class='figure-links'>", link_data, " | ", link_png, " | ", link_pdf, "</div>
</div>
"))
}
# Setup: Load required libraries
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(knitr)
# List all SVG files in the directory
filenames <- list.files("plots/countries/", pattern = "*.svg", full.names = TRUE)
# Initialize an empty list to store HTML for each figure
out <- lapply(filenames, function(file) {
# Extract the country name from the file path
country <- sub(".*/(.*)\\.svg", "\\1", file)
# Define links for data, PNG, and PDF
link_data <- "<a target='_blank' href='https://zenodo.org/records/14637347'>data</a>"
link_png <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".png'>png</a>")
link_pdf <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".pdf'>pdf</a>")
# Create HTML for each figure with links and image
html_content <- paste0("
<div class='figure-container'>
<img src='", file, "' alt='", country, "' />
<div class='figure-title'>", country, "</div>
<div class='figure-links'>", link_data, " | ", link_png, " | ", link_pdf, "</div>
</div>
")
# Return the HTML content
return(html_content)
})
out
paste(out, collapse = '\n')
rm(list = ls())
library(flexdashboard)
library(tidyverse)
library(knitr)
filenames <- list.files("plots/countries/", pattern="*.svg", full.names=TRUE)
out <- lapply(seq_along(filenames), function(i) {
# Tab header, no title in tile as these are in figures
a1 <- knitr::knit_expand(text = "### \n")
# Start R chunk
a2 <- knitr::knit_expand(text = "\n```{r, results='asis',out.width='80%',fig.align = 'center'} \n")
# Render figure
a3  <- knitr::knit_expand(text = paste0("cat('<img src = \"",filenames[i],"\" alt=\"img\"/>' )"))
# End R chunk
a4 <- knitr::knit_expand(text = "\n```\n")
# Start another R chunk
a5 <- knitr::knit_expand(text = "\n```{r, results='asis'} \n")
# Include links to figure and data
country <- sub(".*/(.*)\\.svg", "\\1", filenames[i])
link_1 <- "<a target=\"_blank\" href=\"https://zenodo.org/records/14637347\">data</a>"
link_2 <- paste0("https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/",country,".png")
link_2 <- paste0("<a target=\"_blank\" href=","\"",link_2,"\"",">png</a>")
link_3 <- paste0("https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/",country,".pdf")
link_3 <- paste0("<a target=\"_blank\" href=","\"",link_3,"\"",">pdf</a>")
# Write text
a6  <- knitr::knit_expand(text = paste0("cat('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;','",country,": ')"))
a7  <- knitr::knit_expand(text = paste0("\ncat('",link_1,"')"))
a8  <- knitr::knit_expand(text = paste0("\ncat('|')"))
a9  <- knitr::knit_expand(text = paste0("\ncat('",link_2,"')"))
a10 <- knitr::knit_expand(text = paste0("\ncat('|')"))
a11 <- knitr::knit_expand(text = paste0("\ncat('",link_3,"')"))
# End R chunk
a12 <- knitr::knit_expand(text = "\n```\n")
# Collapse together all lines with newline separator
paste(a1, a2, a3, a5, a4, a5, a6, a7, a8, a9, a10, a11, a12, collapse = '\n')
})
out
# List all SVG files in the directory
filenames <- list.files("plots/countries/", pattern = "*.svg", full.names = TRUE)
# Initialize an empty list to store HTML for each figure
out <- lapply(filenames, function(file) {
# Extract the country name from the file path
country <- sub(".*/(.*)\\.svg", "\\1", file)
# Define links for data, PNG, and PDF
link_data <- "<a target='_blank' href='https://zenodo.org/records/14637347'>data</a>"
link_png <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".png'>png</a>")
link_pdf <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".pdf'>pdf</a>")
# Create HTML for each figure with links and image
html_content <- paste0("
<div class='figure-container'>
<img src='", file, "' alt='", country, "' />
<div class='figure-title'>", country, "</div>
<div class='figure-links'>", link_data, " | ", link_png, " | ", link_pdf, "</div>
</div>
")
# Return the HTML content
return(html_content)
})
out
filenames <- list.files("plots/countries/", pattern="*.svg", full.names=TRUE)
out <- lapply(seq_along(filenames), function(i) {
# Tab header, no title in tile as these are in figures
a1 <- knitr::knit_expand(text = "### \n")
# Start R chunk
a2 <- knitr::knit_expand(text = "\n```{r, results='asis',out.width='80%',fig.align = 'center'} \n")
# Render figure
a3  <- knitr::knit_expand(text = paste0("cat('<img src = \"",filenames[i],"\" alt=\"img\"/>' )"))
# End R chunk
a4 <- knitr::knit_expand(text = "\n```\n")
# Start another R chunk
a5 <- knitr::knit_expand(text = "\n```{r, results='asis'} \n")
# Include links to figure and data
country <- sub(".*/(.*)\\.svg", "\\1", filenames[i])
link_1 <- "<a target=\"_blank\" href=\"https://zenodo.org/records/14637347\">data</a>"
link_2 <- paste0("https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/",country,".png")
link_2 <- paste0("<a target=\"_blank\" href=","\"",link_2,"\"",">png</a>")
link_3 <- paste0("https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/",country,".pdf")
link_3 <- paste0("<a target=\"_blank\" href=","\"",link_3,"\"",">pdf</a>")
# Write text
a6  <- knitr::knit_expand(text = paste0("cat('&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;','",country,": ')"))
a7  <- knitr::knit_expand(text = paste0("\ncat('",link_1,"')"))
a8  <- knitr::knit_expand(text = paste0("\ncat('|')"))
a9  <- knitr::knit_expand(text = paste0("\ncat('",link_2,"')"))
a10 <- knitr::knit_expand(text = paste0("\ncat('|')"))
a11 <- knitr::knit_expand(text = paste0("\ncat('",link_3,"')"))
# End R chunk
a12 <- knitr::knit_expand(text = "\n```\n")
# Collapse together all lines with newline separator
paste(a1, a2, a3, a5, a4, a5, a6, a7, a8, a9, a10, a11, a12, collapse = '\n')
})
out
library(knitr)
library(tidyverse)
# Print the content to be rendered in the HTML document
cat(html_content)
# Define the filenames for the country figures (adjust as needed)
filenames <- list.files("plots/countries/", pattern="*.svg", full.names=TRUE)
# Start the HTML content with the opening tags
html_content <- "
<div class='container'>
"
# Loop through the filenames and create HTML content for each figure
for (file in filenames) {
country <- sub(".*/(.*)\\.svg", "\\1", file)
link_data <- "<a target='_blank' href='https://zenodo.org/records/14637347'>data</a>"
link_png <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".png'>png</a>")
link_pdf <- paste0("<a target='_blank' href='https://raw.githubusercontent.com/lambwf/Tidy-GHG-Inventories/main/plots/countries/", country, ".pdf'>pdf</a>")
# Append the figure container HTML to the content
html_content <- paste0(html_content, "
<div class='figure-container'>
<img src='", file, "' alt='", country, "' />
<div class='figure-title'>", country, "</div>
<div class='figure-links'>", link_data, " | ", link_png, " | ", link_pdf, "</div>
</div>
")
}
# Close the HTML tags
html_content <- paste0(html_content, "
</div>
")
# Print the content to be rendered in the HTML document
cat(html_content)
# Print the content to be rendered in the HTML document
cat(html_content)
metadata$title
