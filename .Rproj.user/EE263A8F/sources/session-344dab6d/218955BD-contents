---
title: "read_crts"
output: html_document
date: "`r Sys.Date()`"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

rm(list=ls())
library(openxlsx)
library(tidyverse)
library(countrycode)
library(zoo)


## download files from https://unfccc.int/ghg-inventories-annex-i-parties/2024
# run scan_files.R

load("data/data_crt_files.RData")

```


```{r get_summary_reports}

# Table10s1, Table10s2, Table10s3, Table10s4, Table10s5, Table10s6
# Assume GWP is always AR5

#data_crts <- data.frame(country=NA,year_submission=NA,gwp=NA,gas=NA,year=NA,category=NA,value=NA)

## for the summary sheets we only need the file for the latest year
files_crts = files_crts %>% filter(file_year==max(files_crts$file_year))
data_crts = data.frame()

files_crts <- files_crts %>% 
  filter(country!="Maldives")

for (i in 1:length(files_crts$country)) {
  
  table_1 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s1"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",`1990`:`2022`) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "ghg")
  
  
  table_2 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s2"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",`1990`:`2022`) %>% 
    mutate(units = "ktCO2") %>% 
    mutate(gas = "co2")
  
  
  table_3 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s3"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",`1990`:`2022`) %>% 
    mutate(units = "ktCH4e") %>% 
    mutate(gas = "ch4")
  
  
  table_4 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s4"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",`1990`:`2022`) %>% 
    mutate(units = "ktN2O") %>% 
    mutate(gas = "n2o")
  
  
  table_5 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s5"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",`1990`:`2022`) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "fgases")
  
  
  table_6 <- read.xlsx(xlsxFile = paste0("sources/CRTs/",files_crts$dir[i],"/",files_crts$files[i]),
                       sheet = paste0("Table10s6"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.EMISSIONS.AND.REMOVALS",`1990`:`2022`) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "totals")
  
  
  ## fix up f-gas table
  table_5 <- table_5 %>% 
    mutate(gas=GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES) %>% 
    mutate(GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES="2.F. Product uses as substitutes for ODS")
  
  table_5 <- table_5 %>% 
    filter(gas %in% c("Emissions of HFCs -  CO2 equivalents (kt) (3)",
                      "Emissions of PFCs -  CO2 equivalents (kt) ",
                      "Emissions of  SF6 -  CO2 equivalents (kt) (3)",
                      "Emissions of NF3 - CO2 equivalents (kt) (3)")) %>% 
    mutate(gas=ifelse(grepl("HFCs",gas),"hfcs",gas)) %>% 
    mutate(gas=ifelse(grepl("PFCs",gas),"pfcs",gas)) %>% 
    mutate(gas=ifelse(grepl("SF6",gas),"sf6",gas)) %>% 
    mutate(gas=ifelse(grepl("NF3",gas),"nf3",gas))
  
  
  ## merge co2, ch4, n2o, fgases
  table <- bind_rows(table_2,table_3,table_4,table_5)
  table <- table %>% 
    select(sector=GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES,gas,units,everything()) %>% 
    filter(!is.na(sector)) %>% 
    filter(!grepl("Note:",sector))
  table <- gather(table,year,value,-sector,-gas,-units)
  
  
  ## deal with NA, NO, IE, NE
  table <- table %>% 
    mutate(value=ifelse(grepl("NA",value),NA,value)) %>% #
    mutate(value=ifelse(grepl("IE",value),NA,value)) %>% # Indicated elsewhere
    mutate(value=ifelse(grepl("NE",value),NA,value)) %>% # Not estimated
    mutate(value=ifelse(grepl("NO",value),0,value)) # Not occurring
  
  
  ## extract sector codes
  table <- table %>% 
    mutate(sector_code=sub("^(\\S+)\\s.*", "\\1", sector)) %>% 
    mutate(sector=sub("^\\S+\\s(.*)", "\\1", sector))
  
  
  ## remove memo items etc.
  table <- table %>% 
    filter(!sector_code %in% c("Memo","Indirect","Total")) %>% 
    filter(!grepl("1.D.",sector_code)) %>% 
    filter(!grepl("5.F.1.",sector_code))
  
  
  ## remove spaces at the beginning of categories
  table$sector <- gsub("^\\s+", "", table$sector)
  
  
  ## extract the emissions hierarchy (just the level associated with each sector)
  table <- table %>%
    mutate(sector_level = map_int(sector_code, ~ sum(str_split(.x, "\\.")[[1]] != "")))
  
  
  ## clean up
  table <- table %>% 
    mutate(country=files_crts$country[i]) %>% 
    mutate(iso=files_crts$iso[i]) %>% 
    select(iso,country,sector_code,sector_description=sector,sector_level,gas,units,year,value) %>%
    mutate(value=as.numeric(value)) %>% 
    mutate(year=as.numeric(year))
  
  
  ## bind to dataset
  data_crts <- bind_rows(data_crts,table)
  
  
}

```

``` {r clean_summary_reports}

## put emissions into a clean format with no double counting and organised sectors 
## check that different levels in the hierarchy add up

data_crts <- data_crts %>% 
  arrange(iso,country,sector_code,sector_description,sector_level,gas,units,year)


## remove trailing spaces in sector descriptions, text within round brackets
data_crts$sector_description <- gsub("\\s+$", "", data_crts$sector_description) 
data_crts$sector_code <- gsub("\\s+$", "", data_crts$sector_code) 
data_crts$sector_description <- gsub("\\(.*?\\)", "", data_crts$sector_description)


## identify leaf nodes

sectors <- data_crts %>% select(sector_code,sector_level,sector_description) %>% distinct()
sectors <- sectors %>%
  mutate(is_leaf = !sapply(sector_code, function(code) {
    any(str_detect(setdiff(sector_code, code), paste0("^", str_replace_all(code, "\\.", "\\\\."))))
  }))


## propagate sector_lv1
sectors <- sectors %>% 
  mutate(match = substr(sector_code,1,1)) %>% 
  left_join(.,sectors %>% 
              filter(sector_level==1) %>%
              mutate(match=substr(sector_code,1,1)) %>% 
              select(match,sector_lv1=sector_description),
            by = join_by(match)) %>% 
  select(-match)


## propagate sector_lv2
sectors <- sectors %>% 
  mutate(match = substr(sector_code,1,3)) %>% 
  left_join(.,sectors %>% 
              filter(sector_level==2) %>%
              mutate(match=substr(sector_code,1,3)) %>% 
              select(match,sector_lv2=sector_description),
            by = join_by(match)) %>% 
  select(-match)


## clean up sectors (no double counting, all codes separate)
sectors <- sectors %>% 
  filter(is_leaf==TRUE) %>% 
  mutate(sector_lv2=ifelse(sector_lv2=="Other",paste0(sector_lv2," (",sector_lv1,")"),sector_lv2)) %>% 
  mutate(sector_lv2=ifelse(is.na(sector_lv2),sector_lv1,sector_lv2)) %>% 
  mutate(sector_lv3=sector_description) %>% 
  mutate(sector_lv3=ifelse(sector_lv3=="Other",paste0(sector_lv3," (",sector_lv1,")"),sector_lv3)) %>% 
  select(-sector_description,-is_leaf)


## rejoin
data_crts <- left_join(data_crts,sectors,by=join_by(sector_code,sector_level))
data_crts_totals <- data_crts %>% filter(is.na(sector_lv1))


## are totals correct at lv1?
data_crts_test <- data_crts %>% 
  filter(!is.na(sector_lv1)) %>% 
  group_by(iso,country,sector_lv1,gas,units,year) %>% 
  summarise(value=sum(value,na.rm=TRUE))

data_crts_test <- left_join(data_crts_test,data_crts_totals %>%
                              select(iso,country,gas,units,year,sector_lv1=sector_description,value_totals=value))#
data_crts_test <- data_crts_test %>% 
  mutate(difference_abs = value-value_totals) %>% 
  mutate(difference_rel = (difference_abs/value)*100) %>% 
  filter(abs(difference_rel)>0.1)


## tidy up sector hierarchy
data_crts <- data_crts %>% filter(!is.na(sector_lv1))


## join AR5 GWPs
gwps <- read.csv("https://raw.githubusercontent.com/openclimatedata/globalwarmingpotentials/main/globalwarmingpotentials.csv",skip = 10) %>% select(gas=Species,gwp100_ar5=AR5GWP100) %>% mutate(gas=tolower(gas))

data_crts <- data_crts %>% 
  left_join(.,gwps,by="gas")

data_crts <- data_crts %>% 
  mutate(gwp100_ar5=ifelse(!gas %in% c("ch4","n2o"),1,gwp100_ar5)) %>% 
  mutate(value_gwp100=value*gwp100_ar5)


## check units are in kt and convert to t

data_crts <- data_crts %>% 
  {if (any(!str_starts(.$units, "kt"))) stop("Error: Not all values in the 'units' column start with 'kt'")
    else .
  } %>%
  mutate(value_gwp100 = value_gwp100 * 1000)

data_crts <- data_crts %>% 
  mutate(units="tCO2e (GWP100 AR5)") %>% 
  select(-gwp100_ar5,-value) %>% 
  rename(value=value_gwp100)


## set levels and arrange
data_crts$gas <- as.factor(data_crts$gas)
data_crts$gas <- factor(data_crts$gas,levels=c("co2","ch4","n2o","hfcs","pfcs","nf3","sf6"))

data_crts <- data_crts %>% arrange(across(-ncol(data_crts)))


## tidy up file
data_crts <- data_crts %>% 
  filter(!is.na(sector_lv1)) %>% 
  select(iso,country,sector_code,sector_level,sector_lv1,sector_lv2,sector_lv3,gas,units,year,value)


```


``` {r save}

save(data_crts,file="data/data_crts.RData")

wb <- createWorkbook()
addWorksheet(wb,"info")
addWorksheet(wb,"data")
addWorksheet(wb,"sectors")
addWorksheet(wb,"countries")

info = data.frame(a=c("Title",
                      "Author",
                      "Contact",
                      "General description",
                      "Sector description",
                      "Global warming potentials",
                      "Country coverage",
                      "Last update",
                      "Link to code"),
                  b=c("Tidy GHG Inventories v0.1",
                      "William F. Lamb",
                      "lamb@mcc-berlin.net",
                      "This data file is a compilation of national greenhouse gas emissions (GHG) inventories, sourced from the Common Reporting Tables (CRTs) that countries submit to the UNFCCC. The CRTs themselves require significant manipulation before one can begin any data analysis. The objective of this dataset is therefore to put the national inventories into a tidy, consistent format that better suits user needs. I sourced the original CRT files from the UNFCCC (e.g. https://unfccc.int/ghg-inventories-annex-i-parties/2024; https://unfccc.int/first-biennial-transparency-reports) and reformatted their summary reports into a single tidy, structured data table.",
                      "Emissions are split into sectors as set out by the Intergovernmental Panel on Climate Change (IPCC) Task Force on National Greenhouse Gas Inventories (TFI). The six main sectors are (1) Energy, (2) Industrial processes and product use, (3) Agriculture, (4) Land use, land-use change and forestry, (5) Waste, and (6) Other. A general description of the sectors is available in the TFI guidance. In this data file the five high level sectors are split into 41 individual categories, which is the most detailed level of reporting provided in the CRT summary sheets. I have included only 'leaf nodes' from the sector hierarchy in the file, which are sectors that have no further child sectors. This means that you can safely sum up all sectors for each country without double counting. The higher level sector categories are provided as variables for convenient aggregation. The 'sector' tab of the spreadsheet shows which sectors are included and how they fit into the TFI hierarchy.",
                      "Countries report emissions from CO2, CH4, N2O and F-gases (HFCs, PFCs, NF3, SF6). I have converted emissions from the different gases to CO2 equivalents using global warming potentials with a 100 year time horizon from the IPCC 5th Assessment Report (GWP100 AR5). More recent GWP100 values have been published in the IPCC AR6, but I have not yet figured out if it is possible to extract F-gases from every CRT in original units, which would be necessary to update the values. CH4 and N2O can be reconverted into their original units by dividing by 28 and 265, respectively.",
                      "Currently only Annex I countries consistently submit CRTs each year. Non-Annex I countries submit at irregular intervals, although this may change. Recently there have also been significant delays in submissions as as countries move to the new reporting format. The full list of countries covered and associated files is in the 'countries' tab of the spreadsheet.",
                      paste0(Sys.Date()),
                      "https://github.com/lambwf/Tidy-GHG-Inventories/blob/main/read_crts.Rmd"))



sector_summary <- table %>% select(sector_code,sector_description,sector_level) %>% distinct()
sector_summary <- left_join(sector_summary,sectors)
sector_summary <- sector_summary %>% 
  mutate(sector_description=ifelse(sector_level==2,paste0("   ",sector_description),sector_description)) %>% 
  mutate(sector_description=ifelse(sector_level==3,paste0("      ",sector_description),sector_description)) %>% 
  mutate(`included data tab?`=ifelse(is.na(sector_lv1),"excluded","included"))

country_summary <- files_crts %>%
  select(iso,country,file=files)


writeData(wb, sheet = "info", info, colNames = F, rowNames = F)
writeData(wb, sheet = "data", data_crts, colNames = T, rowNames = F)
writeData(wb, sheet = "sectors", sector_summary, colNames = T, rowNames = F)
writeData(wb, sheet = "countries", country_summary, colNames = T, rowNames = F)

textStyle <- createStyle(fontSize = 11, wrapText = TRUE, valign = "top", halign = "left")
addStyle(wb, "info", textStyle, rows = 1:nrow(info), cols = 1:2, gridExpand = TRUE)
addStyle(wb, "data",createStyle(numFmt= "0"),rows=1:nrow(data_crts),cols=which(names(data_crts)=="year"))

setColWidths(wb, "info", cols = 1, widths = 20)
setColWidths(wb, "info", cols = 2, widths = 200)
setColWidths(wb, "data", cols = 1:ncol(data_crts), widths = "auto")
setColWidths(wb, "data", cols=which(names(data_crts)=="iso"), widths = 5)
setColWidths(wb, "data", cols=which(names(data_crts)=="year"), widths = 8)
setColWidths(wb, "sectors", cols = 1:ncol(sector_summary), widths = "auto")
setColWidths(wb, "countries", cols = 1:ncol(country_summary), widths = "auto")
setColWidths(wb, "countries", cols=which(names(country_summary)=="iso"), widths = 5)

saveWorkbook(wb,paste0("data/Tidy-GHG-Inventories-v0.1.xlsx"),overwrite=T)


```
