---
title: "file_workflow"
author: "William F. Lamb"
output: word_document
---

```{r setup, include=FALSE}

knitr::opts_chunk$set(echo = FALSE)

rm(list=ls())
library(openxlsx)
library(rvest)
library(httr)
library(countrycode)
library(tidyverse)
library(tools)


```

## Check BTR and AI inventory websites for new files (https://unfccc.int/first-biennial-transparency-reports, https://unfccc.int/ghg-inventories-annex-i-parties/2025) 

``` {r website_fns}

# Function to fetch and parse the webpage
fetch_webpage <- function(url) {
  tryCatch({
    page <- GET(url)
    if (status_code(page) == 200) {
      content <- read_html(page)
      return(content)
    } else {
      stop("Failed to fetch the webpage. HTTP status code: ", status_code(page))
    }
  }, error = function(e) {
    message("Error: ", e$message)
    return(NULL)
  })
}

# Function to extract links with title "CRT"
extract_crt_links <- function(webpage) {
  tryCatch({
    # Select anchor (<a>) elements where title contains "CRT"
    elements <- webpage %>%
      html_elements("a[title*='CRT']")  # Matches any <a> tag with 'CRT' in the title
    
    # Extract href (link) and title
    links <- elements %>% html_attr("href")
    titles <- elements %>% html_attr("title")
    
    if (length(links) == 0) {
      message("No CRT links found on the page.")
      return(NULL)
    } else {
      # Prepend the base URL to form complete links
      base_url <- "https://unfccc.int"
      full_links <- sapply(links, function(link) {
        if (startsWith(link, "/")) {
          paste0(base_url, link)
        } else {
          link
        }
      })
      
      # Extract country names (assume the first word(s) before the first period in the title)
      country_names <- sapply(titles, function(title) {
        strsplit(title, "\\.", fixed = FALSE)[[1]][1]
      })
      
      # Combine country names and links into a data frame
      result <- data.frame(country = country_names, link = full_links, stringsAsFactors = FALSE)
      return(result)
    }
  }, error = function(e) {
    message("Error during link extraction: ", e$message)
    return(NULL)
  })
}

```

``` {r check_btr_ai_webpages}

## Check BTR webpage

btr_webpage <- fetch_webpage("https://unfccc.int/first-biennial-transparency-reports")

btr_links <- extract_crt_links(btr_webpage) %>% 
  mutate(iso=countrycode(country,'country.name','iso3c'))

load("sources/data_crt_files.RData")
files_crts <- files_crts %>% 
  select(iso) %>% 
  distinct() %>% 
  mutate(compiled=1)

btr_links <- btr_links %>% 
  left_join(.,files_crts,by=join_by(iso)) %>% 
  filter(is.na(compiled))


## Check against rejected CRTs
rejected_crts <- read.xlsx("sources/excluded/excluded_files.xlsx") %>% 
  mutate(excluded=1)

btr_links <- btr_links %>% 
  left_join(.,rejected_crts %>% select(iso,excluded),by=join_by(iso))



## Check Annex I national inventory webpage


ai_webpage <- fetch_webpage("https://unfccc.int/ghg-inventories-annex-i-parties/2025")

ai_links <- extract_crt_links(ai_webpage) %>% 
  mutate(iso=countrycode(country,'country.name','iso3c'))

load("sources/data_crt_files.RData")
files_crts <- files_crts %>% 
  select(iso,year_submission) %>% 
  distinct() %>% 
  filter(year_submission==2025) %>% 
  mutate(compiled=1)

ai_links <- ai_links %>% 
  left_join(.,files_crts,by=join_by(iso)) %>% 
  filter(is.na(compiled))





## Now go and download the files in those links, put them in the "sources/new/" folder

rm(files_crts)

```

## Extract new zip files

``` {r extract_zip_files}

zips <- data.frame(dir=list.files(path = "sources/new/", pattern = "\\.zip$", full.names = TRUE))

for (zip_file in zips$dir) {
  # Get the directory path and the base name of the zip file
  dir_path <- dirname(zip_file)
  base_name <- file_path_sans_ext(basename(zip_file))

  # Create a new directory for the zip file
  new_dir <- file.path(dir_path, base_name)
  dir.create(new_dir, showWarnings = FALSE)

  # Extract the zip file into the new directory
  unzip(zipfile = zip_file, exdir = new_dir)

  # List all files in the new directory
  extracted_files <- list.files(new_dir, recursive = TRUE, full.names = TRUE)

  # Check if all extracted files are .xlsx files
  non_xlsx_files <- extracted_files[!grepl("\\.xlsx$", extracted_files)]
  if (length(non_xlsx_files) > 0) {
    warning(paste("Non-.xlsx files found in:", new_dir))
  }
}

## Delete the extracted zip files

for (zip_file in zips$dir) {
  file.remove(zip_file)
}


## Check there are no subfolders or funny files!!


## unzip every folder in a folder... (some special cases)
# special_folder <- data.frame(dir=list.files(path = "sources/new/EU_CRT_1990_2023/zipped", pattern = "\\.zip$", full.names = TRUE))
# 
# for (zip_file in special_folder$dir) {
#   
#   unzip(zipfile = zip_file, exdir = "sources/new/EU_CRT_1990_2023")
#   
# }
  

```

## Scan new files and build a data frame with the file links and names 

``` {r scan_new_files}

folders <- data.frame(dir=list.files(path = "sources/new/"))
new_crt_files = data.frame(dir=NA,files=NA,country=NA,year_file=NA,year_submission=NA,status=NA)

for (i in 1:length(folders$dir)) {
  
  files <- data.frame(dir=folders$dir[i],
                      files=list.files(path = paste0("sources/new/",folders$dir[i])),
                      year_file=NA,
                      country=NA,
                      year_submission=NA,
                      status="compiled")
  
  for (j in 1:length(files$files)) {
    
    ## Extract the country name, file year and submission year from the top of Table1 in every sheet
    
    file_info <- read.xlsx(xlsxFile = paste0("sources/new/",folders$dir[i],"/",files$files[j]),
                           sheet = paste0("Table1"),rows = 1:3,colNames = FALSE)
    
    files$year_file[j] <- str_extract(file_info$X2[1], "\\d{4}")
    files$year_submission[j] <- str_extract(file_info$X2[2], "\\d{4}")
    files$country[j] <- file_info$X2[3]
    
    ## The following lines capture cases where file information was put into an ajoined column (e.g. ISR)
    
    if (is.na(files$year_file[j]) &  length(names(file_info))>2 ) {
      
      files$year_file[j] <- str_extract(file_info$X3[1], "\\d{4}")
      files$year_submission[j] <- str_extract(file_info$X3[2], "\\d{4}")
      files$country[j] <- file_info$X3[3]
      
    }
    
    
  }
  
  new_crt_files <- rbind(new_crt_files,files)
  
}

new_crt_files <- new_crt_files %>% 
  filter(!is.na(dir)) %>% 
  mutate(iso=countrycode(country,"country.name","iso3c")) %>% 
  mutate(country=countrycode(iso,"iso3c","country.name"))


## check for issues

check <- new_crt_files %>% 
  filter(is.na(country) | is.na(year_file) | is.na(year_submission))



```

## Scan the summaries and extract data

```{r scan_summaries}

# Table10s1, Table10s2, Table10s3, Table10s4, Table10s5, Table10s6
# Assume GWP is always AR5


## for the summary sheets we only need the file for the latest year

files_to_extract <- new_crt_files %>%
  arrange(iso,year_file) %>% 
  group_by(iso,dir) %>% 
  mutate(include=ifelse(year_file==last(year_file),1,0)) %>% 
  filter(include==1)


## prepare data frames

data_crts <- data.frame()
data_crts_memos <- data.frame()


#i=54

for (i in 1:length(files_to_extract$country)) {
  
  table_1 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s1"),
                       startRow = 8) %>% 
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "ghg") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  table_2 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s2"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktCO2") %>% 
    mutate(gas = "co2") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  table_3 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s3"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktCH4e") %>% 
    mutate(gas = "ch4") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  table_4 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s4"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktN2O") %>% 
    mutate(gas = "n2o") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  table_5 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s5"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "fgases") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  table_6 <- read.xlsx(xlsxFile = paste0("sources/new/",files_to_extract$dir[i],"/",files_to_extract$files[i]),
                       sheet = paste0("Table10s6"),
                       startRow = 8) %>%
    select("GREENHOUSE.GAS.EMISSIONS.AND.REMOVALS",matches("^\\d{4}")) %>% 
    rename_with(~ substr(., 1, 4), matches("^\\d{4}")) %>% 
    mutate(units = "ktCO2e") %>% 
    mutate(gas = "totals") %>% 
    mutate(across(matches("^\\d{4}$"), as.character))
  
  
  ## fix up f-gas table
  table_5 <- table_5 %>% 
    mutate(gas=GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES) %>% 
    mutate(GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES="2.F. Product uses as substitutes for ODS")
  
  table_5 <- table_5 %>% 
    filter(gas %in% c("Emissions of HFCs -  CO2 equivalents (kt) (3)",
                      "Emissions of PFCs -  CO2 equivalents (kt) ",
                      "Emissions of  SF6 -  CO2 equivalents (kt) (3)",
                      "Emissions of NF3 - CO2 equivalents (kt) (3)",
                      "Unspecified mix of  HFCs and PFCs - CO2 equivalents (kt) (3)")) %>% 
    mutate(gas=ifelse(grepl("Unspecified",gas),"hfcs/pfcs (unspecified)",gas)) %>% 
    mutate(gas=ifelse(grepl("HFCs",gas),"hfcs",gas)) %>% 
    mutate(gas=ifelse(grepl("PFCs",gas),"pfcs",gas)) %>% 
    mutate(gas=ifelse(grepl("SF6",gas),"sf6",gas)) %>% 
    mutate(gas=ifelse(grepl("NF3",gas),"nf3",gas))
  
  
  ## merge co2, ch4, n2o, fgases
  table <- bind_rows(table_2,table_3,table_4,table_5)
  table <- table %>% 
    select(sector=GREENHOUSE.GAS.SOURCE.AND.SINK.CATEGORIES,gas,units,everything()) %>% 
    filter(!is.na(sector)) %>% 
    filter(!grepl("Note:",sector))
  table <- gather(table,year,value,-sector,-gas,-units)
  
  
  ## remove some funny character strings that crop up (Maldives)
  table$sector <- gsub('xml:space="preserve">',"",table$sector)
  
  
  ## deal with NA, NO, IE, NE
  table <- table %>% 
    mutate(value=ifelse(grepl("NA",value),NA,value)) %>% #
    mutate(value=ifelse(grepl("IE",value),NA,value)) %>% # Indicated elsewhere
    mutate(value=ifelse(grepl("NE",value),NA,value)) %>% # Not estimated
    mutate(value=ifelse(grepl("NO",value),0,value)) # Not occurring
  
  
  ## extract sector codes
  table <- table %>% 
    mutate(sector_code=sub("^(\\S+)\\s.*", "\\1", sector)) %>% 
    mutate(sector=sub("^\\S+\\s(.*)", "\\1", sector))
  
  
  ## remove spaces at the beginning of categories
  table$sector <- gsub("^\\s+", "", table$sector)
  
  
  ## extract the emissions hierarchy (just the level associated with each sector)
  table <- table %>%
    mutate(sector_level = map_int(sector_code, ~ sum(str_split(.x, "\\.")[[1]] != "")))
  
  
  ## remove memo items etc.
  memos <- table %>% 
    filter(grepl("1.D.",sector_code) | grepl("5.F.1.",sector_code))
  table <- table %>% 
    filter(!sector_code %in% c("Memo","Indirect","Total")) %>% 
    filter(!grepl("1.D.",sector_code)) %>% 
    filter(!grepl("5.F.1.",sector_code))
  
  
  ## clean up
  table <- table %>% 
    mutate(country=files_to_extract$country[i]) %>% 
    mutate(iso=files_to_extract$iso[i]) %>% 
    mutate(dir=files_to_extract$dir[i]) %>% 
    mutate(year_submission=files_to_extract$year_submission[i]) %>% 
    select(iso,country,dir,year_submission,sector_code,sector_description=sector,sector_level,gas,units,year,value) %>%
    mutate(value=as.numeric(value)) %>% 
    mutate(year=as.numeric(year))
  
  memos <- memos %>% 
    mutate(country=files_to_extract$country[i]) %>% 
    mutate(iso=files_to_extract$iso[i]) %>% 
    mutate(dir=files_to_extract$dir[i]) %>% 
    mutate(year_submission=files_to_extract$year_submission[i]) %>% 
    select(iso,country,dir,year_submission,sector_code,sector_description=sector,sector_level,gas,units,year,value) %>%
    mutate(value=as.numeric(value)) %>% 
    mutate(year=as.numeric(year))
  
  
  ## bind to dataset
  data_crts <- bind_rows(data_crts,table)
  data_crts_memos <- bind_rows(data_crts_memos,memos)
  
}

```

``` {r clean_summary_reports}

## put emissions into a clean format with no double counting and organised sectors 

data <- data_crts %>% 
  arrange(iso,country,dir,year_submission,sector_code,sector_description,sector_level,gas,units,year)


## remove trailing spaces in sector descriptions, text within round brackets
data$sector_description <- gsub("\\s+$", "", data$sector_description) 
data$sector_code <- gsub("\\s+$", "", data$sector_code) 
data$sector_description <- gsub("\\(.*?\\)", "", data$sector_description)
data$sector_description[data$sector_description=="Land use, land-use change and forestry "] <-
  "Land use, land-use change and forestry"


## fix Ecuador biomass burning issue (they renamed the 4.H. Other sector
data <- data %>% 
  mutate(sector_description=ifelse(sector_description=="Biomass burning" & sector_code=="4.H.","Other",sector_description))


## identify leaf nodes

sectors <- data %>% select(sector_code,sector_level,sector_description) %>% distinct()
sectors <- sectors %>%
  mutate(is_leaf = !sapply(sector_code, function(code) {
    any(str_detect(setdiff(sector_code, code), paste0("^", str_replace_all(code, "\\.", "\\\\."))))
  }))


## propagate sector_lv1
sectors <- sectors %>% 
  mutate(match = substr(sector_code,1,1)) %>% 
  left_join(.,sectors %>% 
              filter(sector_level==1) %>%
              mutate(match=substr(sector_code,1,1)) %>% 
              select(match,sector_lv1=sector_description),
            by = join_by(match)) %>% 
  select(-match)


## propagate sector_lv2
sectors <- sectors %>% 
  mutate(match = substr(sector_code,1,3)) %>% 
  left_join(.,sectors %>% 
              filter(sector_level==2) %>%
              mutate(match=substr(sector_code,1,3)) %>% 
              select(match,sector_lv2=sector_description),
            by = join_by(match)) %>% 
  select(-match)


## clean up sectors
sectors <- sectors %>% 
  filter(is_leaf==TRUE) %>% 
  mutate(sector_lv2=ifelse(sector_lv2=="Other",paste0(sector_lv2," (",sector_lv1,")"),sector_lv2)) %>% 
  mutate(sector_lv2=ifelse(is.na(sector_lv2),sector_lv1,sector_lv2)) %>% 
  mutate(sector_lv3=sector_description) %>% 
  mutate(sector_lv3=ifelse(sector_lv3=="Other",paste0(sector_lv3," (",sector_lv1,")"),sector_lv3)) %>% 
  select(-sector_description)


## rejoin
data <- left_join(data,sectors,by=join_by(sector_code,sector_level))

```

``` {r check_totals}

#### check that different levels in the hierarchy add up


## calculate totals in non-leaf nodes
data_totals <- data %>% 
  filter(is.na(is_leaf)) %>% 
  group_by(iso,country,sector_code,sector_description,sector_level,gas,units,year) %>% 
  summarise(value_totals=sum(value,na.rm=TRUE))


## are totals correct at lv2?
data_test <- data %>%
  filter(is_leaf==TRUE) %>% 
  group_by(iso,country,sector_lv2,gas,units,year) %>% 
  summarise(value=sum(value,na.rm=TRUE)) 
  
data_test <- left_join(data_test %>% rename(sector_description=sector_lv2),data_totals) %>% 
  filter(!is.na(value_totals))

data_test <- data_test %>% 
  mutate(difference_abs = value_totals-value) %>% 
  mutate(difference_rel = (difference_abs/value_totals)*100) %>% 
  filter(abs(difference_rel)>0.1)


## are totals correct at lv1?
data_test <- data %>%
  filter(is_leaf==TRUE) %>%
  group_by(iso,country,dir,year_submission,sector_lv1,gas,units,year) %>% 
  summarise(value=sum(value,na.rm=TRUE)) 
  
data_test <- left_join(data_test %>% rename(sector_description=sector_lv1),data_totals) %>% 
  filter(!is.na(value_totals))

data_test <- data_test %>% 
  mutate(difference_abs = value_totals-value) %>% 
  mutate(difference_rel = (difference_abs/value_totals)*100) %>% 
  filter(abs(difference_rel)>0.01)


## some countries report direct and indirect emissions from N inputs to unspecified managed soils in Table 4(I)
## but they only add these to the LULUCF totals (sector 4) and not the underlying sectors (4A-4H)
## therefore we create a residual category to capture these and join it

data_residual <- data_test %>% 
  filter(gas=="n2o") %>% 
  mutate(sector_code="4.X.") %>% 
  mutate(is_leaf="TRUE") %>% 
  mutate(sector_lv1="Land use, land-use change and forestry") %>% 
  mutate(sector_lv2="Other (N from unspecified managed soils)") %>% 
  mutate(sector_lv3="Other (N from unspecified managed soils)") %>% 
  mutate(sector_description="Other (N from unspecified managed soils)") %>% 
  mutate(sector_level=2) %>% 
  select(iso,country,dir,year_submission,sector_code,sector_description,sector_level,gas,units,year,value=difference_abs,is_leaf,sector_lv1,sector_lv2,sector_lv3)

data <- rbind(data,data_residual)

sectors <- rbind(sectors,data_residual %>% ungroup() %>% 
  select(sector_code,sector_level,is_leaf,sector_lv1,sector_lv2,sector_lv3) %>% distinct()) %>%
  arrange(sector_code)

sectors_full <- data %>% select(sector_code,sector_description,sector_level) %>% distinct() %>% arrange(sector_code)


## tidy up sector hierarchy
data <- data %>% filter(!is.na(sector_lv1))


```


``` {r remove_na_years}

## remove years with only NA data (e.g. China 1990)

data <- data %>% 
  group_by(iso,year) %>% 
  mutate(year_total=sum(value,na.rm=T)) %>% 
  ungroup()

warning <- data %>% 
  filter(year_total==0) %>% 
  select(country,year) %>% 
  distinct()

if (length(warning$country) > 0) {
  for (i in 1:length(warning$country)) {
    print(paste0("Warning: ",warning$country[i]," in year ",warning$year[i]," removed due to null values"))
  }
}


data <- data %>% 
  filter(year_total!=0) %>% 
  select(-year_total)


```


``` {r apply_gwps}

## join AR5 GWPs
gwps <- read.csv("https://raw.githubusercontent.com/openclimatedata/globalwarmingpotentials/main/globalwarmingpotentials.csv",skip = 10) %>% select(gas=Species,gwp100_ar5=AR5GWP100) %>% mutate(gas=tolower(gas))

data <- data %>% left_join(.,gwps,by="gas")
data_memos <- data_crts_memos %>% left_join(.,gwps,by="gas")

data <- data %>% 
  mutate(gwp100_ar5=ifelse(!gas %in% c("ch4","n2o"),1,gwp100_ar5)) %>% 
  mutate(value_gwp100=value*gwp100_ar5)

data_memos <- data_memos %>% 
  mutate(gwp100_ar5=ifelse(!gas %in% c("ch4","n2o"),1,gwp100_ar5)) %>% 
  mutate(value_gwp100=value*gwp100_ar5)


## check units are in kt and convert to t

data <- data %>% 
  {if (any(!str_starts(.$units, "kt"))) stop("Error: Not all values in the 'units' column start with 'kt'")
    else .
  } %>%
  mutate(value_gwp100 = value_gwp100 * 1000)

data_memos <- data_memos %>% 
  {if (any(!str_starts(.$units, "kt"))) stop("Error: Not all values in the 'units' column start with 'kt'")
    else .
  } %>%
  mutate(value_gwp100 = value_gwp100 * 1000)


data <- data %>% 
  mutate(units="tCO2e (GWP100 AR5)") %>% 
  select(-gwp100_ar5,-value) %>% 
  rename(value=value_gwp100)

data_memos <- data_memos %>% 
  mutate(units="tCO2e (GWP100 AR5)") %>% 
  select(-gwp100_ar5,-value) %>% 
  rename(value=value_gwp100)


## set levels and arrange
data <- data %>% 
  mutate(gas=as.factor(gas)) %>% 
  mutate(gas=fct_relevel(gas,"co2","ch4","n2o","hfcs","pfcs","nf3","sf6","hfcs/pfcs (unspecified)"))

data_memos <- data_memos %>% 
  mutate(gas=as.factor(gas)) %>% 
  mutate(gas=fct_relevel(gas,"co2","ch4","n2o"))


## tidy up file
data <- data %>% 
  filter(!is.na(sector_lv1)) %>% 
  select(country,iso,dir,year_submission,sector_code,sector_level,sector_lv1,sector_lv2,sector_lv3,gas,units,year,value)

data_memos <- data_memos %>% 
  select(country,iso,dir,year_submission,sector_code,sector_level,sector=sector_description,gas,units,year,value)


data <- data %>% arrange(across(-ncol(data)))
data_memos <- data_memos %>% arrange(across(-ncol(data_memos)))



```


``` {r save}

data_crts <- data
data_crts_memos <- data_memos

## Save individual files for each CRT

for (i in 1:length(files_to_extract$dir)) {
  
  file_name <- paste0(files_to_extract$country[i],"_",files_to_extract$year_submission[i])
  
  data <- data_crts %>% filter(dir==files_to_extract$dir[i]) 
  data_memos <- data_crts_memos %>% filter(dir==files_to_extract$dir[i])
  
  save(data,data_memos,file=paste0("sources/compiled/",file_name,".RData"))
  
}


## Move the compiled files to done, update file directory

for (i in 1:length(files_to_extract$dir)) {
  
  source_path <- file.path("sources/new",files_to_extract$dir[i])
  destination_path <- file.path("sources/done", files_to_extract$dir[i])
  file.rename(from = source_path, to = destination_path)
  
}


## update file structure
load("sources/data_crt_files.RData")
# files_crts <- data.frame(iso=NA,country=NA,dir=NA,files=NA,year_file=NA,year_submission=NA,status=NA)
# files_crts <- files_crts %>% filter(!is.na(dir))
files_crts <- rbind(files_crts,new_crt_files %>% mutate(status="compiled"))
save(files_crts,file="sources/data_crt_files.RData")




```
